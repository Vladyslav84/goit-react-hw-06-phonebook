{"version":3,"sources":["components/Filter/Filter.module.css","redux/slices/contacts.js","components/ContactForm/ContactForm.jsx","redux/slices/filter.js","components/Filter/Filter.jsx","components/ContactList/ContactList.jsx","App.js","redux/store.js","index.js","components/ContactForm/ContactForm.module.css","components/ContactList/ContactList.module.css","App.module.css"],"names":["module","exports","contactsSlice","createSlice","name","initialState","JSON","parse","localStorage","getItem","reducers","addContact","state","action","payload","deleteContact","filter","contact","id","actions","ContactForm","dispatch","useDispatch","allContacts","useSelector","numberInputId","uuidv4","nameInputId","onSubmit","evt","preventDefault","some","target","elements","inputName","value","alert","number","inputNumber","reset","className","s","form","formItem","autoComplete","type","pattern","title","required","btn","filterSlice","_","Filter","onChange","currentTarget","toLocaleLowerCase","ContactList","filteredContactList","includes","useEffect","setItem","stringify","contactList","map","user","contactitem","onClick","App","container","length","rootReducer","store","configureStore","reducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kIACAA,EAAOC,QAAU,CAAC,OAAS,yB,wJCGrBC,EAAgBC,YAAY,CAC9BC,KAAM,WACNC,aAAY,UAAEC,KAAKC,MAAMC,aAAaC,QAAQ,wBAAlC,QAAsD,GAClEC,SAAU,CACNC,WAAY,SAACC,EAAOC,GAAR,OAAoBA,EAAOC,SAA3B,mBAAuCF,KACnDG,cAAe,SAACH,EAAOC,GAAR,OAAmBD,EAAMI,QAAO,SAAAC,GAAO,OAAIA,EAAQC,KAAOL,EAAOC,eAIjF,EAAsCZ,EAAciB,QAA5CR,EAAR,EAAQA,WAAYI,EAApB,EAAoBA,cAEZb,IAAf,Q,OCRe,SAASkB,IACpB,IAAMC,EAAWC,cACXC,EAAcC,aAAY,SAAAZ,GAAK,OAAIA,EAAMV,iBAmBzCuB,EAAgBC,cAChBC,EAAcD,cAEpB,OACI,uBAAME,SArBW,SAAAC,GACjBA,EAAIC,iBAEAP,EAAYQ,MAAK,SAAAd,GAAO,OAAIA,EAAQb,OAASyB,EAAIG,OAAOC,SAASC,UAAUC,SAC3EC,MAAM,GAAD,OAAIP,EAAIG,OAAOC,SAASC,UAAUC,MAAlC,4BAGLd,EAASV,EAAW,CAChBP,KAAMyB,EAAIG,OAAOC,SAASC,UAAUC,MACpCE,OAAQR,EAAIG,OAAOC,SAASK,YAAYH,MACxCjB,GAAIQ,iBAIZG,EAAIG,OAAOO,SAOmBC,UAAWC,IAAEC,KAA3C,UACI,6CACA,uBAAOF,UAAWC,IAAEE,SAApB,SACI,uBACIC,aAAa,MACbC,KAAK,OACLzC,KAAK,YACL0C,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,EACR9B,GAAIS,MAGZ,sBAAMa,UAAWC,IAAEJ,OAAnB,oBACA,uBAAOG,UAAWC,IAAEE,SAApB,SACI,uBACIC,aAAa,MACbC,KAAK,MACLzC,KAAK,cACL0C,QAAQ,yFACRC,MAAM,giBACNC,UAAQ,EACR9B,GAAIO,MAGZ,wBAAQoB,KAAK,SAASL,UAAWC,IAAEQ,IAAnC,4B,qBCrDNC,EAAc/C,YAAY,CAC5BC,KAAM,SACNC,aAAc,GACdK,SAAU,CACNM,OAAQ,SAACmC,EAAD,YAAKrC,YAKNE,EAAWkC,EAAY/B,QAAvBH,OAEAkC,IAAf,QCVe,SAASE,IACxB,IAAM/B,EAAWC,cACb,OACI,gCACI,mBAAGkB,UAAWC,IAAEM,MAAhB,mCACA,gCACI,uBAAOF,KAAK,OAAOQ,SAAU,SAACxB,GAAD,OAASR,EAASL,EAAOa,EAAIyB,cAAcnB,MAAMoB,8B,oBCN/E,SAASC,IAEtB,IAAMjC,EAAcC,aAAY,SAAAZ,GAAK,OAAIA,EAAMV,iBACzCc,EAASQ,aAAY,SAAAZ,GAAK,OAAIA,EAAMsC,eACpC7B,EAAWC,cAEXmC,EAAsBlC,EAAYP,QAAO,SAAAC,GAAO,OACpDA,EAAQb,KAAKmD,oBAAoBG,SAAS1C,MAQ5C,OANA2C,qBAAU,WAERnD,aAAaoD,QAAQ,eAAgBtD,KAAKuD,UAAUtC,MAEnD,CAACA,IAGF,oBAAIiB,UAAWC,IAAEqB,YAAjB,SACGL,EAAoBM,KAAI,SAACC,GAAD,OAEvB,qBAAkBxB,UAAWC,IAAEwB,YAA/B,UACE,iCAAOD,EAAK5D,KAAZ,IAAmB4D,EAAK3B,UACxB,wBAAQQ,KAAK,SAASL,UAAWC,IAAEQ,IACjCiB,QAAS,kBAAM7C,EAASF,EAAsB6C,EAAK9C,MADrD,sBAFO8C,EAAK9C,S,oBClBP,SAASiD,IACxB,IAAM5C,EAAcC,aAAY,SAAAZ,GAAK,OAAIA,EAAMV,iBAC7C,OACE,sBAAKsC,UAAWC,IAAE2B,UAAlB,UACE,oBAAI5B,UAAWC,IAAEM,MAAjB,uBACA,cAAC3B,EAAD,IACwB,IAAvBG,EAAY8C,QAAgB,oBAAI7B,UAAWC,IAAEM,MAAjB,sBACL,IAAvBxB,EAAY8C,QAAgB,cAACjB,EAAD,IAC7B,cAACI,EAAD,OCVN,IAAMc,EAAc,CAClBpE,gBACAgD,eAUaqB,EAPDC,YAAe,CAC3BC,QACEH,EAEFI,UAAUC,ICNZC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUP,MAAOA,EAAjB,SACE,cAACJ,EAAD,QAGJY,SAASC,eAAe,U,kBCZ1BhF,EAAOC,QAAU,CAAC,KAAO,0BAA0B,SAAW,8BAA8B,IAAM,yBAAyB,OAAS,8B,kBCApID,EAAOC,QAAU,CAAC,YAAc,iCAAiC,IAAM,yBAAyB,YAAc,mC,kBCA9GD,EAAOC,QAAU,CAAC,UAAY,uBAAuB,MAAQ,sB","file":"static/js/main.ea155e59.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter\":\"Filter_filter__1HcNv\"};","import { createSlice } from \"@reduxjs/toolkit\";\n\n// const initialState = [];\n\nconst contactsSlice = createSlice({\n    name: 'contacts',\n    initialState: JSON.parse(localStorage.getItem('contactsList')) ?? [],\n    reducers: {\n        addContact: (state, action) => [action.payload, ...state],\n        deleteContact: (state, action) => state.filter(contact => contact.id !== action.payload),\n           }\n});\n\nexport const { addContact, deleteContact } = contactsSlice.actions;\n\nexport default contactsSlice.reducer;","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport s from './ContactForm.module.css';\nimport { v4 as uuidv4 } from 'uuid';\nimport { addContact } from '../../redux/slices/contacts';\n\n\nexport default function ContactForm() {\n    const dispatch = useDispatch();\n    const allContacts = useSelector(state => state.contactsSlice);\n\n    const handleSubmit = evt => {\n        evt.preventDefault();\n\n        if (allContacts.some(contact => contact.name === evt.target.elements.inputName.value)) {\n            alert(`${evt.target.elements.inputName.value} is already in contacts`)\n        } else {\n\n            dispatch(addContact({\n                name: evt.target.elements.inputName.value,\n                number: evt.target.elements.inputNumber.value,\n                id: uuidv4(),\n            }))\n        };\n\n        evt.target.reset();\n    };\n\n    const numberInputId = uuidv4();\n    const nameInputId = uuidv4();\n\n    return (\n        <form onSubmit={handleSubmit} className={s.form}>\n            <span>Name Name</span>\n            <label className={s.formItem}>\n                <input\n                    autoComplete=\"off\"\n                    type=\"text\"\n                    name=\"inputName\"\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                    title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n                    required\n                    id={nameInputId}\n                />\n            </label>\n            <span className={s.number}>Number</span>\n            <label className={s.formItem}>\n                <input\n                    autoComplete=\"off\"\n                    type=\"tel\"\n                    name=\"inputNumber\"\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                    title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n                    required\n                    id={numberInputId}\n                />\n            </label>\n            <button type=\"submit\" className={s.btn}>Add contact</button>\n        </form>\n    )\n}","import { createSlice } from \"@reduxjs/toolkit\";\n\n// const initialState = [];\n\nconst filterSlice = createSlice({\n    name: 'filter',\n    initialState: '',\n    reducers: {\n        filter: (_, {payload}) => payload,\n       \n           }\n});\n\nexport const { filter } = filterSlice.actions;\n\nexport default filterSlice.reducer;","import React from \"react\";\nimport s from './Filter.module.css';\nimport { useDispatch } from 'react-redux';\nimport { filter } from '../../redux/slices/filter';\n\nexport default function Filter () {\nconst dispatch = useDispatch();\n    return (\n        <div>\n            <p className={s.title}>Find contacts by name</p>\n            <label>\n                <input type=\"text\" onChange={(evt) => dispatch(filter(evt.currentTarget.value.toLocaleLowerCase()))}></input>\n            </label>\n        </div>\n    )\n};\n\n","import React, { useEffect } from 'react';\nimport s from './ContactList.module.css';\nimport {  useSelector, useDispatch } from 'react-redux';\nimport * as actions from '../../redux/slices/contacts';\n\nexport default function ContactList  ()  {\n  \n  const allContacts = useSelector(state => state.contactsSlice);\n  const filter = useSelector(state => state.filterSlice);\n  const dispatch = useDispatch();\n\n  const filteredContactList = allContacts.filter(contact =>\n    contact.name.toLocaleLowerCase().includes(filter));\n\n  useEffect(() => {\n\n    localStorage.setItem('contactsList', JSON.stringify(allContacts));\n\n  }, [allContacts]);\n\n  return (\n    <ul className={s.contactList}>\n      {filteredContactList.map((user) => (\n\n        <li key={user.id} className={s.contactitem} >\n          <span>{user.name} {user.number}</span>\n          <button type='button' className={s.btn}\n            onClick={() => dispatch(actions.deleteContact(user.id))}\n          >Delete</button>\n        </li>\n      ))}\n    </ul>\n  )\n}","import ContactForm from './components/ContactForm/ContactForm';\nimport Filter from './components/Filter/Filter';\nimport ContactList from './components/ContactList/ContactList';\nimport s from './App.module.css';\nimport { useSelector } from 'react-redux';\n\nexport default function App() {\nconst allContacts = useSelector(state => state.contactsSlice);\n  return (\n    <div className={s.container}>\n      <h1 className={s.title}>Phonebook</h1>\n      <ContactForm />\n      {allContacts.length !== 0 && <h2 className={s.title}>Contacts</h2>}\n      {allContacts.length !== 0 && <Filter />}\n      <ContactList />\n    </div>\n  );\n\n}","import { configureStore } from '@reduxjs/toolkit';\nimport contactsSlice from './slices/contacts';\nimport filterSlice from './slices/filter';\n\nconst rootReducer = {\n  contactsSlice,\n  filterSlice\n};\n\nconst store = configureStore({\n  reducer: \n    rootReducer,\n\n  devTools: process.env.NODE_ENV !== \"production\",\n});\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './redux/store'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__3gjqt\",\"formItem\":\"ContactForm_formItem__2OmZI\",\"btn\":\"ContactForm_btn__2FeGr\",\"number\":\"ContactForm_number__2LeOx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactList\":\"ContactList_contactList__14tZN\",\"btn\":\"ContactList_btn__1nHu-\",\"contactitem\":\"ContactList_contactitem__3P81X\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__3L5ls\",\"title\":\"App_title__1GZHB\"};"],"sourceRoot":""}