{"version":3,"sources":["components/Filter/Filter.module.css","redux/actions.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.jsx","App.js","redux/reducers.js","redux/store.js","index.js","components/ContactForm/ContactForm.module.css","components/ContactList/ContactList.module.css","App.module.css"],"names":["module","exports","addContact","createAction","deleteContact","filter","ContactForm","dispatch","useDispatch","allContacts","useSelector","state","reducerContacts","value","numberInputId","uuidv4","nameInputId","onSubmit","evt","preventDefault","some","contact","name","target","elements","inputName","alert","number","inputNumber","id","reset","className","s","form","formItem","autoComplete","type","pattern","title","required","btn","Filter","onChange","currentTarget","toLocaleLowerCase","ContactList","filteredContactList","includes","useEffect","localStorage","setItem","JSON","stringify","contactList","map","user","contactitem","onClick","actions","App","container","length","createReducer","parse","getItem","action","payload","reducerFilter","_","combineReducers","store","configureStore","reducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3ceda968.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter\":\"Filter_filter__l3_Ce\"};","import { createAction } from '@reduxjs/toolkit';\r\n\r\n// export const addContact = (value) => {\r\n//     return {\r\n//         type: \"contacts/addContact\",\r\n//         payload: value,\r\n//     }\r\n// };\r\n\r\n// export const deleteContact = (id) => {\r\n\r\n//     return {\r\n//         type: \"contacts/deleteContact\",\r\n//         payload: id,\r\n//     }\r\n// };\r\n\r\n// export const filter = (value) => {\r\n\r\n//     return {\r\n//         type: \"contacts/filter\",\r\n//         payload: value,\r\n//     }\r\n// };\r\n\r\n  export const addContact = createAction('contacts/addContact');\r\n  export const deleteContact = createAction('contacts/deleteContact');\r\n export const filter = createAction('contacts/filter');\r\n \r\n// export { addContact, deleteContact, filter };","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport s from './ContactForm.module.css';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { addContact} from '../../redux/actions';\r\n\r\n\r\nexport default function ContactForm() {\r\n    const dispatch = useDispatch();\r\n    const allContacts = useSelector(state => state.reducerContacts.value);\r\n\r\n    const handleSubmit = evt => {\r\n        evt.preventDefault();\r\n\r\n        if (allContacts.some(contact => contact.name === evt.target.elements.inputName.value))\r\n        {\r\n            alert(`${ evt.target.elements.inputName.value } is already in contacts`)\r\n        } else\r\n        {\r\n\r\n            dispatch(addContact({\r\n                name: evt.target.elements.inputName.value,\r\n                number: evt.target.elements.inputNumber.value,\r\n                id: uuidv4(),\r\n            }))\r\n        };\r\n\r\n        evt.target.reset();\r\n    };\r\n\r\n    const numberInputId = uuidv4();\r\n    const nameInputId = uuidv4();\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit} className={s.form}>\r\n            <span>Name</span>\r\n            <label className={s.formItem}>\r\n                <input\r\n                    autoComplete=\"off\"\r\n                    type=\"text\"\r\n                    name=\"inputName\"\r\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                    title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                    required\r\n                    id={nameInputId}\r\n                />\r\n            </label>\r\n            <span className={s.number}>Number</span>\r\n            <label className={s.formItem}>\r\n                <input\r\n                    autoComplete=\"off\"\r\n                    type=\"tel\"\r\n                    name=\"inputNumber\"\r\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                    title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n                    required\r\n                    id={numberInputId}\r\n                />\r\n            </label>\r\n            <button type=\"submit\" className={s.btn}>Add contact</button>\r\n        </form>\r\n    )\r\n}","import React from \"react\";\r\nimport s from './Filter.module.css';\r\nimport { useDispatch } from 'react-redux';\r\nimport { filter } from '../../redux/actions';\r\n\r\nexport default function Filter () {\r\nconst dispatch = useDispatch();\r\n    return (\r\n        <div>\r\n            <p className={s.title}>Find contacts by name</p>\r\n            <label>\r\n                <input type=\"text\" onChange={(evt) => dispatch(filter(evt.currentTarget.value.toLocaleLowerCase()))}></input>\r\n            </label>\r\n        </div>\r\n    )\r\n};\r\n\r\n","import React, { useEffect } from 'react';\r\nimport s from './ContactList.module.css';\r\nimport {  useSelector, useDispatch } from 'react-redux';\r\nimport * as actions from '../../redux/actions';\r\n\r\nexport default function ContactList  ()  {\r\n  \r\n  const allContacts = useSelector(state => state.reducerContacts.value);\r\n  const filter = useSelector(state => state.reducerContacts.filter);\r\n  const dispatch = useDispatch();\r\n\r\n  const filteredContactList = allContacts.filter(contact =>\r\n    contact.name.toLocaleLowerCase().includes(filter));\r\n\r\n  useEffect(() => {\r\n\r\n    localStorage.setItem('contactsList', JSON.stringify(allContacts));\r\n\r\n  }, [allContacts]);\r\n\r\n  return (\r\n    <ul className={s.contactList}>\r\n      {filteredContactList.map((user) => (\r\n\r\n        <li key={user.id} className={s.contactitem} >\r\n          <span>{user.name} {user.number}</span>\r\n          <button type='button' className={s.btn}\r\n            onClick={() => dispatch(actions.deleteContact(user.id))}\r\n          >Delete</button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  )\r\n}","import ContactForm from './components/ContactForm/ContactForm';\r\nimport Filter from './components/Filter/Filter';\r\nimport ContactList from './components/ContactList/ContactList';\r\nimport s from './App.module.css';\r\nimport { useSelector } from 'react-redux';\r\n\r\nexport default function App() {\r\nconst allContacts = useSelector(state => state.reducerContacts.value);\r\n  return (\r\n    <div className={s.container}>\r\n      <h1 className={s.title}>Phonebook</h1>\r\n      <ContactForm />\r\n      {allContacts.length !== 0 && <h2 className={s.title}>Contacts</h2>}\r\n      {allContacts.length !== 0 && <Filter />}\r\n      <ContactList />\r\n    </div>\r\n  );\r\n\r\n}","import { createReducer } from '@reduxjs/toolkit';\r\nimport { addContact, deleteContact, filter } from '../redux/actions';\r\nimport { combineReducers } from 'redux';\r\n\r\nconst reducerContacts = createReducer(JSON.parse(localStorage.getItem('contactsList')) ?? [], {\r\n    \r\n  [addContact]: (state, action) => [action.payload, ...state],\r\n  [deleteContact]: (state, action) => state.filter(contact => contact.id !== action.payload),\r\n});\r\n\r\nconst reducerFilter = createReducer('', {\r\n  [filter]: (_, {payload}) => payload,\r\n});\r\n \r\nexport default combineReducers({\r\n  value: reducerContacts,\r\n  filter: reducerFilter,\r\n})","import reducerContacts from '../redux/reducers'\r\nimport { configureStore } from '@reduxjs/toolkit';\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    reducerContacts: reducerContacts,\r\n  },\r\n  devTools: process.env.NODE_ENV !== \"production\",\r\n});\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './redux/store'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__2I3JH\",\"formItem\":\"ContactForm_formItem__3Mrsr\",\"btn\":\"ContactForm_btn__3G0AP\",\"number\":\"ContactForm_number__1MVkn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactList\":\"ContactList_contactList__z51HV\",\"btn\":\"ContactList_btn__ILbBY\",\"contactitem\":\"ContactList_contactitem__1_iTh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__3KJYo\",\"title\":\"App_title__1Vph1\"};"],"sourceRoot":""}